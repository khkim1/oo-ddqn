#include "constants.h"
#include "tf_util.h"

using namespace std;
using namespace tensorflow;

int main() {
  Status status;
  Tensor out;
  // ant, ball, pro

  // TFModel model("../../DQN-model/saves/trained_Q/1000/episode_1000.ckpt");
  // Vec input({
  //     0, 0, 1, 0,0,1,0,0,1,
  //     -0.7798742055892944, 0.0, 1.0,
  //     -0.3396226465702057, -0.11320754885673523, 1.0,
  //     0.7798742055892944, -0.7672955989837646, 1.0,
  //     -0.7798742055892944, -0.10062892735004425, 1.0, -0.18867924809455872, -0.21383647620677948, 1.0, 0.7798742055892944, -0.9119496941566467, 1.0, -0.7798742055892944, -0.17610062658786774, 1.0, -0.03773584961891174, -0.31446540355682373, 1.0, 0.7798742055892944, -0.9371069073677063, 1.0, -0.7798742055892944, -0.276729553937912, 1.0, 0.11320754885673523, -0.4150943458080292, 1.0, 0.7798742055892944, -0.8427672982215881, 1.0, -0.7798742055892944, -0.3522012531757355, 1.0, 0.2641509473323822, -0.5157232880592346, 1.0, 0.7798742055892944, -0.7421383857727051, 1.0, -0.7798742055892944, -0.4528301954269409, 1.0, 0.4150943458080292, -0.6163522005081177, 1.0, 0.7798742055892944, -0.6918238997459412, 1.0, -0.7798742055892944, -0.5283018946647644, 1.0, 0.5660377144813538, -0.7169811129570007, 1.0, 0.7798742055892944, -0.8176100850105286, 1.0, -0.7798742055892944, -0.6289308071136475, 1.0, 0.7169811129570007, -0.8176100850105286, 1.0, 0.7798742055892944, -0.8176100850105286, 1.0, -0.7798742055892944, -0.704402506351471, 1.0, 0.6415094137191772, -0.8805031180381775, 1.0, 0.7798742055892944, -0.5911949872970581, 1.0, -0.7798742055892944, -0.805031418800354, 1.0, 0.49056604504585266, -0.9308176040649414, 1.0, 0.7798742055892944, -0.44025155901908875, 1.0, -0.7798742055892944, -0.8805031180381775, 1.0, 0.3396226465702057, -0.9811320900917053, 1.0, 0.7798742055892944, -0.5408805012702942, 1.0,
  //     0,0,0,0,1,0,  // one-hot action
  //     });
  // cout << "input size: " << input.size() << endl;
  // model.RunVector(input, kInputPlaceholderPro, kNextStateTensorPro, &out);
     
  TFModel model("../reward_model/reward_model");
  model.RunMatrix({-0.77987421, -0.1509434,   1.,
                    0.88050312, -0.21383648,  1.,
                    0.77987421,  0.21383648,  1.,
                  },
                  TensorShape({1, 9}),
                  kInputPlaceholderReward, kRewardTensor, &out);

  // Tensor x_val(DT_FLOAT, TensorShape({3}));
  // x_val.vec<float>()(0) = 1.0f;
  // x_val.vec<float>()(1) = 2.0f;
  // x_val.vec<float>()(2) = 3.0f;
  // const vector<pair<string, Tensor>> feed = { {"ph_x", x_val} };
  // vector<string> outputOps = {"pred", "wb:0"};
  // vector<Tensor> results;
  // status = sess->Run(feed, outputOps, {}, &results);
  cout << out.DebugString() << endl;
  // for (int i = 0; i < out.dim_size(0); ++i) {
  //   cout << out.vec<float>()(i) << ",";
  // }
}

